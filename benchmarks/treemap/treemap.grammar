traversal pre {
    case Root {
        ??;
        recur child;
    }
    case CountryContainer {
        ??;
        iterate childs { ??; recur childs; ??; }
    }
    case Region {
        ??;
        iterate childs { ??; recur childs; ??; }
    }
    case District {
        ??;
        iterate childs { ??; recur childs; ??; }
    }
    case VSquare {
        ??;
        iterate childs { ??; recur childs; ??; }
    }
    case HSquare {
        ??;
        iterate childs { ??; recur childs; ??; }
    }
    case PollingPlace {
        ??;
    }
}

traversal post {
    case Root {
        recur child;
        ??;
    }
    case CountryContainer {
        iterate childs { ??; recur childs; ??; }
        ??;
    }
    case Region {
        iterate childs { ??; recur childs; ??; }
        ??;
    }
    case District {
        iterate childs { ??; recur childs; ??; }
        ??;
    }
    case VSquare {
        iterate childs { ??; recur childs; ??; }
        ??;
    }
    case HSquare {
        iterate childs { ??; recur childs; ??; }
        ??;
    }
    case PollingPlace {
        ??;
    }
}

interface IRoot {
    input width : int;
    input height : int;
    input fixWidth : int;

    input minTurnout : int;
    input maxTurnout : int;

    input showFraud : int;
    input showProjected : int;
    input showJavascript : int;

    output votesUR : int;
    output totalMag : int;
}

class Root : IRoot {
    children { child : Node; }
    statements {
        child.w := if self.fixWidth != 0 then self.width else self.width * (self.totalMag / 63895164);
        child.h := self.height * (self.totalMag / 63895164);

        child.rx := self.width;
        child.by := self.height;

        child.minTurnout := self.minTurnout;
        child.maxTurnout := self.maxTurnout;

        child.showFraud := self.showFraud;
        child.showProjected := self.showProjected;

        child.fixWidth := self.fixWidth;
        child.showJavascript := self.showJavascript;

        self.totalMag := child.totalMag;
        self.votesUR := child.votesUR / self.totalMag;
    }
}

interface Node {
    output totalMag : int;

    output minTurnout : int;
    output maxTurnout : int;

    output votesUR : int;

    output showFraud : int;
    output showProjected : int;

    output fixWidth : int;

    output render : int;
    output showJavascript : int;

    output w : int;
    output h : int;
    output x : int;
    output rx : int;
    output y : int;
    output by : int;
}

trait tweenMagnitude {
    children { childs : [Node]; }
    statements {
        self.totalMag := foldl 0 .. self[@].totalMag + childs[i].totalMag;
        childs[i].minTurnout := self.minTurnout;
        childs[i].maxTurnout := self.maxTurnout;

        childs[i].showFraud := self.showFraud;
        childs[i].showProjected := self.showProjected;

        childs[i].fixWidth := self.fixWidth;

        childs[i].showJavascript := self.showJavascript;

        self.votesUR := foldl 0 .. self[@].votesUR + childs[i].votesUR;
    }
}

class CountryContainer(tweenMagnitude) : Node {
    statements {
        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.render := if self.fixWidth != 0 then self.x + self.y + self.w + self.h else 0;

        childs[i].w := (childs[i].totalMag / self.totalMag) * self.w;
        childs[i].h := self.h;
        childs[i].rx := scanl self.x .. childs[@].rx + childs[i].w;
        childs[i].by := self.y + self.h;
    }
}

class Region(tweenMagnitude) : Node {
    statements {
        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.render := 0;

        childs[i].w := self.w;
        childs[i].h := (childs[i].totalMag / self.totalMag) * self.h;
        childs[i].rx := self.x + self.w;
        childs[i].by := scanl self.y .. childs[@].by + childs[i].h;
    }
}

class District(tweenMagnitude) : Node {
    statements {
        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.render := if self.fixWidth != 0 then self.x + self.y + self.w + self.h else 0;

        childs[i].w := (childs[i].totalMag / self.totalMag) * self.w;
        childs[i].h := self.h;
        childs[i].rx := scanl self.x .. childs[@].rx + childs[i].w;
        childs[i].by := self.y + self.h;
    }
}

class VSquare(tweenMagnitude) : Node {
    statements {
        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.render := 0;

        childs[i].w := self.w;
        childs[i].h := (childs[i].totalMag / self.totalMag) * self.h;
        childs[i].rx := self.x + self.w;
        childs[i].by := scanl self.y .. childs[@].by + childs[i].h;
    }
}

class HSquare(tweenMagnitude) : Node {
    statements {
        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.render := 0;

        childs[i].w := (childs[i].totalMag / self.totalMag) * self.w;
        childs[i].h := self.h;
        childs[i].rx := scanl self.x .. childs[@].rx + childs[i].w;
        childs[i].by := self.y + self.h;
    }
}

class PollingPlace : Node {
    attributes {
        input totalVotes : int;
        input totalVotesUR : int;
        input urVotes : int;
        input urVotesProjected : int;
        input turnout : int;

        input defColor : int;
        input urColor : int;
        input fraudColor : int;

        input inJavascript : int;

        output calcRegularColor : int;
        output calcFraudColor : int;
        output calcProjectedColor : int;
        output calcVotesColor : int;

        output magnitude : int;
    }
    statements {
        self.calcProjectedColor := self.defColor + self.urColor + self.urVotesProjected;
        self.calcRegularColor := self.defColor + self.urColor + self.urVotes;
        self.calcVotesColor := if self.turnout > 0 then self.calcRegularColor + self.calcProjectedColor + self.showProjected else self.calcRegularColor;
        self.calcFraudColor := if self.turnout > 0 then self.fraudColor else self.calcVotesColor;

        self.render := self.x + self.y + self.w + self.h + self.calcVotesColor + self.calcFraudColor + self.showFraud;

        self.x := self.rx - self.w;
        self.y := self.by - self.h;

        self.magnitude := if self.turnout > self.minTurnout && self.turnout <= self.maxTurnout then self.totalVotes else 0;
        self.totalMag := if self.inJavascript != 0 then self.magnitude else self.showJavascript * self.magnitude;

        self.votesUR :=
            if self.turnout > self.minTurnout && self.turnout <= self.maxTurnout then
                if self.turnout > 0 then
                    self.totalVotesUR * (1 - self.showProjected)
                    + self.totalVotes * self.urVotesProjected * self.showProjected
                else
                    self.totalVotesUR
            else
                0;
    }

}
