/* WIP: Syntactic translation of Cassius semantics */
traversal layout {
    case Viewport {
        ??;
        recur root;
    }
    case Block {
        ??;
        iterate children { ??; recur children; ??; }
        ??;
    }
    case Floated {
        ??;
        iterate children { ??; recur children; ??; }
        ??;
    }
}

interface Tree {
    input width : Pixels;
    input height : Pixels;
}

interface Layout {
    /* X, Y and width/height */
    output x : Pixels;
    output y : Pixels;
    output w : Pixels;
    output h : Pixels;

    /* X and Y offset */
    output xo : Pixels;
    output yo : Pixels;

    /* margins */
    output mt : Pixels;
    output mr : Pixels;
    output mb : Pixels;
    output ml : Pixels;

    /* top/bottom positive/negative margins for collapsing */
    output mtp : Pixels;
    output mtn : Pixels;
    output mtp_up : Pixels;
    output mtn_up : Pixels;
    output mbp : Pixels;
    output mbn : Pixels;
    output mbp_prev : Pixels;
    output mbn_prev : Pixels;

    output mb_clear : bool;
    output mb_clear_prev : bool;

    output collapse_top : bool; /* with children */
    output collapse_bottom : bool; /* with children */
    output collapse_through : bool; /* with parent */
    output collapse_weird : bool; /* s831c */

    /* padding */
    output pt : Pixels;
    output pr : Pixels;
    output pb : Pixels;
    output pl : Pixels;

    /* border */
    output bt : Pixels;
    output br : Pixels;
    output bb : Pixels;
    output bl : Pixels;

    output scroll_x : Pixels;
    output scroll_y : Pixels;

    output stf_width : Pixels;
    output stf_max : Pixels;
    output float_stf_max : Pixels;
    output w_from_stf_width : bool;
    output width_set : bool;

    output text_indent : Pixels;
    output baseline : Pixels;
    output above_baseline : Pixels;
    output below_baseline : Pixels;

    output float_cursor_in : FloatCursor;
    output float_cursor_out : FloatCursor;

    output has_content : bool;
    output is_first_box : bool;
    output is_last_box : bool;
    output is_replaced : bool;

    output is_firstish_box : bool;
    output is_collapsed_through : bool;
    output inline_float_next_line : bool;
    output lookback_overflow_width : Pixels;
    output line_height : Pixels;
    output uses_parent_width : Pixels;
    output inline_block_offset : Pixels;

    output foreground : Color;
    output background : Color;

    input is_in_flow : bool;
    input is_replaced : bool;
    input style : Style; // computed

    /* Temporary accumulators */
    output has_content__rec : bool;
}

trait BoxModel {
    self.has_content__rec :=
        foldl
            false
        ..
            if children.is_in_flow then children.has_content else @{self.has_content__rec};

    children.has_content :=
        children.ml > 0 || children.bl > 0 || children.pl > 0 ||
        children.pr > 0 || children.br > 0 || children.mr > 0 ||
        children.w > 0 ||
        @{self.has_content__rec} ||
        children.has_content__rec;

    self.is_collapsed_through :=
        self.box_height == 0.0 &&
        !self.is_replaced &&
        ((self.is_line() &&
          ![#]{children.has_content : false}) ||
         [#]{children.is_collapsed_through : false});
}

/* The document viewport. */
class Viewport : Tree {
    children {
        initial : Layout;
    }
    rules {
        initial.mtp_up := 0.0;
        initial.mtn_up := 0.0;
        initial.mbp_prev := 0.0;
        initial.mbn_prev := 0.0;
        initial.mb_clear_prev := false;
    }
}

/*
trait CollapsibleMargin {
    rules {
        self.mtp :=
       (max-if
        (max-if
         (ite (> (mt b) 0.0) (mt b) 0.0)
         (and (top-margin-collapses-with-children b) (is-box f) (not (has-clearance f)))
         (mtp-up f))
        (and (box-collapsed-through b) (not (has-clearance b)) (is-box v))
        (mbp v));

        self.mtp_up :=
       (max-if (ite (box-collapsed-through b) (mbp b) (mtp b))
               (and (is-box (nflow b)) (box-collapsed-through b) (not (has-clearance (nflow b))))
               (mtp-up (nflow b)));


        self.mtn :=
       (min-if
        (min-if
         (ite (< (mt b) 0.0) (mt b) 0.0)
         (and (top-margin-collapses-with-children b) (is-box f) (not (has-clearance f)))
         (mtn-up f))
        (and (box-collapsed-through b) (not (has-clearance b)) (is-box v))
        (mbn v));

        self.mtn_up :=
       (min-if (ite (box-collapsed-through b) (mbn b) (mtn b))
               (and (is-box (nflow b)) (box-collapsed-through b) (not (has-clearance (nflow b))))
               (mtn-up (nflow b)));
    (= (mb-clear b)
       (or (has-clearance b) (and (is-box v) (box-collapsed-through b) (mb-clear v))))
    (= (mbp b)
       (max-if
        (max-if
         (ite (> (mb b) 0.0) (mb b) 0.0)
         (and (bottom-margin-collapses-with-children b) (is-box l) (not (mb-clear l))
              (not (change-s831c b)))
         (mbp l))
        (box-collapsed-through b)
        (mtp b)))
    (= (mbn b)
       (min-if
        (min-if
         (ite (< (mb b) 0.0) (mb b) 0.0)
         (and (bottom-margin-collapses-with-children b) (is-box l) (not (mb-clear l))
              (not (change-s831c b)))
         (mbn l))
        (box-collapsed-through b)
        (mtn b))))))

        self.collapse_top := self.pt == 0.0 && self.bt == 0.0;
        self.collapse_bottom :=
          self.pb == 0.0 && self.bb == 0.0 &&
          is_auto(self.style.height) && !self.is_replaced;

        self.collapse_through := // last[kids.collapse_through : false]
          (self.bt + self.pt + self.h + self.pb + self.bb + self.scroll_x) == 0.0 &&
          !self.is_replaced && kids$$.collapse_through;

        self.collapse_weird :=
          self.collapse_top && kids$$.is_first_box && kids$$.collapse_through &&
          is_positive_pixel_or_percent(min_height(self.computed)) &&
          is_auto(height(self.computed));

        kids.mtp_up := scanr 0.0
            .. if kids.collapse_through then max(kids.mbp, kids.mtp_up@) else kids.mtp
            .. if !kids.has_clearance then kids.mtp_up else 0.0;

        kids.mtn_up := scanr 0.0
            .. if kids.collapse_through then min(kids.mbn, kids.mtn_up@) else kids.mtn
            .. if !kids.has_clearance then kids.mtn_up else 0.0;

        kids.mbp_prev := scanl 0.0 .. kids.mbp_prev@ .. kids.mbp;
        kids.mbn_prev := scanl 0.0 .. kids.mbn_prev@ .. kids.mbn;

        self.mtp :=
          max(
            max(
              max(self.mt, 0.0),
              if (self.collapse_top && !kids$0.has_clearance)
              then kids.mtp_up$
              else 0.0
            ),
            if (self.collapse_through && !self.has_clearance)
            then self.mbp_prev
            else 0.0
          );
        self.mtn :=
          min(
            min(
              min(self.mt, 0.0),
              if (self.collapse_top && !kids$0.has_clearance)
              then kids.mtn_up$
              else 0.0
            ),
            if (self.collapse_through && !self.has_clearance)
            then self.mbn_prev
            else 0.0
          );

        self.mbp :=
          max(
            max(
              max(self.mb, 0.0),
              if (self.collapse_bottom && !kids$$.mb_clear && !self.collapse_weird)
              then kids$$.mbp
              else 0.0
            ),
            if self.collapse_through then self.mtp else 0.0
          );
        self.mbn :=
          min(
            min(
              min(self.mb, 0.0),
              if (self.collapse_bottom && !kids$$.mb_clear && !self.collapse_weird)
              then kids$$.mbn
              else 0.0
            ),
            if self.collapse_through then self.mtn else 0.0
          );

        kids.mb_clear_prev := scanl false .. kids.mb_clear_prev@ .. kids.mb_clear;

        self.mb_clear :=
          self.has_clearance || (self.collapse_through && self.mb_clear_prev);

    }
}
*/

trait NonCollapsibleMargin {
    rules {
        // TODO
    }
}

/* A box under block layout. */
class Block : Layout {
    children {
        children : [Layout];
    }
    rules {
      self.width := self.bl + self.pl + self.w + self.pr + self.br + self.scroll_y;

      self.height := self.bt + self.pt + self.h + self.pb + self.bb + self.scroll_x;

      self.mtn := foldl 0.0 .. @{self.mtn} + children.mt;

      self.mb_clear_prev := [0]{children.mb_clear : false};
      self.mb_clear := [#]{children.mb_clear : false};

      children.mtp := children.mt;
    }
}

/* A box under floating layout. */
class Floated(NonCollapsibleMargin) : Layout {
    children {
        children : [Layout];
    }
    rules {
        self.width := foldl 0 .. children.width + @{self.width};
        children.height := @{self.width};
        self.height := [#]{children.height : 0.0};
        // TODO
    }
}
