traversal inorder {
    case Viewport {
        ??;
        recur root;
    }
    case Block {
        ??;
        iterate children { ??; recur children; ??; }
        ??;
    }
    case Inline {
        ??;
    }
    case Floated {
        ??;
        iterate children { ??; recur children; ??; }
        ??;
    }
}

/*
How do we want to express CSS semantics?

For box-tree construction, a notion of tree transducer extended for unranked
branching could offer a clean, straightforward formalism. Processing an unranked
child sequence with a regular expression should suffice for all the tree
transformations essential to CSS (e.g., block-in-inline splitting).

For box-tree annotation (i.e., layout), a standard notion of attribute grammar
could technically work but entails sophisticated refactoring of the semantics
(e.g., non-descendent references, combinatorial feature interaction).
 */

/*
transducer Layout(Styled) {
  Node(Inline*) =>
  Text =>
}

if Node.display == Block {
  // foo
}
*/

traversal pre {
    case Viewport {
        ??;
        recur root;
    }
    case Block {
        ??;
        iterate children { ??; recur children; ??; }
    }
    case Floated {
        ??;
        iterate children { ??; recur children; ??; }
    }
    case Inline {
        ??;
    }
}

traversal post {
    case Viewport {
        recur root;
        ??;
    }
    case Block {
        iterate children { ??; recur children; ??; }
        ??;
    }
    case Floated {
        iterate children { ??; recur children; ??; }
        ??;
    }
    case Inline {
        ??;
    }
}

interface Tree {
    input width : Pixels;
    input height : Pixels;
}

/* The document viewport. */
class Viewport : Tree {
    children {
        root : LayoutNode; // The initial containing block.
    }
    statements {
        root.layout.container.x := 0.0;
        root.layout.container.y := 0.0;
        root.layout.container.width := self.width;
        root.layout.container.height := 0.0; // self.height
        root.layout.float_cursor_in := FloatCursor::empty();
    }
}

interface LayoutNode {
    // Container box
    output layout.container.x : Pixels;
    output layout.container.y : Pixels;
    output layout.container.width : Pixels;
    output layout.container.height : Pixels;

    // Content box (computed)
    output layout.content_box.x : Pixels;
    output layout.content_box.y : Pixels;
    output layout.content_box.width : Pixels;
    output layout.content_box.height : Pixels;

    // Padding box (computed)
    output layout.padding_box.x : Pixels;
    output layout.padding_box.y : Pixels;
    output layout.padding_box.width : Pixels;
    output layout.padding_box.height : Pixels;

    // Border box (computed)
    output layout.border_box.x : Pixels;
    output layout.border_box.y : Pixels;
    output layout.border_box.width : Pixels;
    output layout.border_box.height : Pixels;

    // Margin box (computed)
    output layout.margin_box.x : Pixels;
    output layout.margin_box.y : Pixels;
    output layout.margin_box.width : Pixels;
    output layout.margin_box.height : Pixels;

    // Padding edges (computed)
    output layout.padding.left : Pixels;
    output layout.padding.right : Pixels;
    output layout.padding.top : Pixels;
    output layout.padding.bottom : Pixels;

    // Border edges (computed)
    output layout.border.left : Pixels;
    output layout.border.right : Pixels;
    output layout.border.top : Pixels;
    output layout.border.bottom : Pixels;

    // Margin edges (computed)
    output layout.margin.left : Pixels;
    output layout.margin.right : Pixels;
    output layout.margin.top : Pixels;
    output layout.margin.bottom : Pixels;

    // Margin collapse
    //output layout.margin_above.positive : Pixels;
    //output layout.margin_above.negative : Pixels;
    output layout.margin_above.collapse : bool;
    //output layout.margin_below.positive : Pixels;
    //output layout.margin_below.negative : Pixels;
    output layout.margin_below.collapse : bool;

    // Difference between intrinsic and container widths
    output layout.underflow : Pixels;

    output layout.float_cursor_in : FloatCursor;
    output layout.float_cursor_out : FloatCursor;
    //output layout.float_clearance : Pixels;
    output layout.block_size : Pixels;

    // Anonymity
    input layout.anonymous : bool;

    // Display and position mode
    input style.display : Display;
    input style.position : Positioned;
    input style.float : Floated;
    input style.clear.left : bool;
    input style.clear.right : bool;

    // Colors
    input style.background_color : Color;
    input style.border_color : Color;

    // Content size (specified)
    input style.width : Automatic<Pixels>;
    input style.height : Automatic<Pixels>;

    // Content edges (specified)
    input style.left : Automatic<Pixels>;
    input style.right : Automatic<Pixels>;
    input style.top : Automatic<Pixels>;
    input style.bottom : Automatic<Pixels>;

    // Margin edges (specified)
    input style.margin.left : Automatic<Pixels>;
    input style.margin.right : Automatic<Pixels>;
    input style.margin.top : Automatic<Pixels>;
    input style.margin.bottom : Automatic<Pixels>;

    // Padding edges (specified)
    input style.padding.left : Pixels;
    input style.padding.right : Pixels;
    input style.padding.top : Pixels;
    input style.padding.bottom : Pixels;

    // Border edges (specified)
    input style.border.left : Pixels;
    input style.border.right : Pixels;
    input style.border.top : Pixels;
    input style.border.bottom : Pixels;

    // Float positioning
    input style.float : Float;
    input layout.carried_margin : Pixels;
}

class Block : LayoutNode {
    children {
        children : [LayoutNode];
    }
    statements {
        self.layout.border.left := self.style.border.left;
        self.layout.border.right := self.style.border.right;
        self.layout.border.top := self.style.border.top;
        self.layout.border.bottom := self.style.border.bottom;

        self.layout.padding.left := self.style.padding.left;
        self.layout.padding.right := self.style.padding.right;
        self.layout.padding.top := self.style.padding.top;
        self.layout.padding.bottom := self.style.padding.bottom;

        self.layout.margin_above.collapse :=
            self.layout.padding.top == 0.0 && self.layout.border.top == 0.0;
        self.layout.margin_below.collapse :=
            self.layout.padding.bottom == 0.0 && self.layout.border.bottom == 0.0 &&
            self.style.height->is_auto();

        self.layout.margin.left :=
            if self.style.margin.left->is_auto() then
                if self.style.width->is_auto() || self.layout.underflow < 0.0 then
                    0.0
                else if self.style.margin.right->is_auto() then
                    self.layout.underflow / 2.0
                else
                    self.layout.underflow
            else
                self.style.margin.left->value();

        self.layout.margin.right :=
            if self.style.width->is_auto() && self.layout.underflow < 0.0 then
                self.style.margin.right->value() + self.layout.underflow
            else if self.style.margin.right->is_auto() then
                if self.style.width->is_auto() then
                    0.0
                else if self.style.margin.left->is_auto() then
                    self.layout.underflow / 2.0
                else
                    self.layout.underflow
            else if !self.style.margin.left->is_auto() || !self.style.width->is_auto() then
                self.style.margin.right->value() + self.layout.underflow
            else
                self.style.margin.right->value();

        self.layout.margin.top := max(self.style.margin.top->value() - self.layout.carried_margin, 0.0);
        self.layout.margin.bottom := self.style.margin.bottom->value();

        self.layout.underflow :=
            self.layout.container.width
            - self.style.padding.left - self.style.padding.right
            - self.style.border.left - self.style.border.right
            - self.style.margin.left->value() - self.style.margin.right->value()
            - self.style.width->value();

        self.layout.content_box.x :=
            self.layout.container.x +
            self.layout.padding.left + self.layout.border.left /* + self.layout.margin.left */;
        self.layout.content_box.width :=
            if self.style.width->is_auto() then
                max(self.layout.underflow, 0.0)
            else
                self.style.width->value();

        self.layout.content_box.y :=
            max(
                self.layout.container.y + //self.layout.container.height +
                self.layout.padding.top + self.layout.border.top + self.layout.margin.top,
                max(
                    if self.style.clear.left then 64.0 /*left_clearance(self.layout.float_cursor_in)*/ else 0.0,
                    if self.style.clear.right then 64.0 /*right_clearance(self.layout.float_cursor_in)*/ else 0.0
                )
            );
        self.layout.content_box.height :=
            if self.style.height->is_auto() then
                children[$].layout.container.height
            else
                self.style.height->value();

        children[i].layout.container.x := self.layout.content_box.x;
        children[i].layout.container.width := self.layout.content_box.width;

        children[i].layout.container.y := self.layout.content_box.y;
        children[i].layout.container.height :=
            scanl
                0.0
            ..
                children[@].layout.container.height + children[i].layout.content_box.height;

        self.layout.padding_box.x := self.layout.content_box.x - self.layout.padding.left;
        self.layout.padding_box.y := self.layout.content_box.y - self.layout.padding.top;
        self.layout.padding_box.width := self.layout.content_box.width + self.layout.padding.left + self.layout.padding.right;
        self.layout.padding_box.height := self.layout.content_box.height + self.layout.padding.top + self.layout.padding.bottom;

        self.layout.border_box.x := self.layout.padding_box.x - self.layout.border.left;
        self.layout.border_box.y := self.layout.padding_box.y - self.layout.border.top;
        self.layout.border_box.width := self.layout.padding_box.width + self.layout.border.left + self.layout.border.right;
        self.layout.border_box.height := self.layout.padding_box.height + self.layout.border.top + self.layout.border.bottom;

        self.layout.margin_box.x := self.layout.border_box.x - self.layout.margin.left;
        self.layout.margin_box.y := self.layout.border_box.y - self.layout.margin.top;
        self.layout.margin_box.width := self.layout.border_box.width + self.layout.margin.left + self.layout.margin.right;
        self.layout.margin_box.height := self.layout.border_box.height + self.layout.margin.top + self.layout.margin.bottom;

        self.layout.block_size := self.layout.margin_box.height;

        children[i].layout.float_cursor_in := FloatCursor::empty();
        self.layout.float_cursor_out := clone(self.layout.float_cursor_in);
    }
}

class Floated : LayoutNode {
    children {
        children : [LayoutNode];
    }
    statements {
        self.layout.border.left := self.style.border.left;
        self.layout.border.right := self.style.border.right;
        self.layout.border.top := self.style.border.top;
        self.layout.border.bottom := self.style.border.bottom;

        self.layout.padding.left := self.style.padding.left;
        self.layout.padding.right := self.style.padding.right;
        self.layout.padding.top := self.style.padding.top;
        self.layout.padding.bottom := self.style.padding.bottom;

        self.layout.margin_above.collapse := 1 == 0;
        self.layout.margin_below.collapse := 1 == 0;

        self.layout.margin.left := self.style.margin.left->value();
        self.layout.margin.right := self.style.margin.right->value();
        self.layout.margin.top := self.style.margin.top->value();
        self.layout.margin.bottom := self.style.margin.bottom->value();

        self.layout.underflow :=
            self.layout.container.width
            - self.style.padding.left - self.style.padding.right
            - self.style.border.left - self.style.border.right
            - self.style.margin.left->value() - self.style.margin.right->value()
            - self.style.width->value();

        self.layout.content_box.x :=
            self.layout.container.x +
            self.layout.padding.left + self.layout.border.left + self.layout.margin.left;
        self.layout.content_box.width :=
            if self.style.width->is_auto() then
                max(self.layout.underflow, 0.0)
            else
                self.style.width->value();

        self.layout.content_box.y :=
            self.layout.container.y + //self.layout.container.height +
            self.layout.padding.top + self.layout.border.top + self.layout.margin.top;
        self.layout.content_box.height :=
            if self.style.height->is_auto() then
                children[$].layout.container.height
            else
                self.style.height->value();

        children[i].layout.container.x := self.layout.content_box.x;
        children[i].layout.container.width := self.layout.content_box.width;

        children[i].layout.container.y := self.layout.content_box.y;
        children[i].layout.container.height :=
            scanl
                0.0
            ..
                children[@].layout.container.height + children[i].layout.content_box.height;

        self.layout.padding_box.x := self.layout.content_box.x - self.layout.padding.left;
        self.layout.padding_box.y := self.layout.content_box.y - self.layout.padding.top;
        self.layout.padding_box.width := self.layout.content_box.width + self.layout.padding.left + self.layout.padding.right;
        self.layout.padding_box.height := self.layout.content_box.height + self.layout.padding.top + self.layout.padding.bottom;

        self.layout.border_box.x := self.layout.padding_box.x - self.layout.border.left;
        self.layout.border_box.y := self.layout.padding_box.y - self.layout.border.top;
        self.layout.border_box.width := self.layout.padding_box.width + self.layout.border.left + self.layout.border.right;
        self.layout.border_box.height := self.layout.padding_box.height + self.layout.border.top + self.layout.border.bottom;

        self.layout.margin_box.x := self.layout.border_box.x - self.layout.margin.left;
        self.layout.margin_box.y := self.layout.border_box.y - self.layout.margin.top;
        self.layout.margin_box.width := self.layout.border_box.width + self.layout.margin.left + self.layout.margin.right;
        self.layout.margin_box.height := self.layout.border_box.height + self.layout.margin.top + self.layout.margin.bottom;

        self.layout.block_size := 0.0;

        children[i].layout.float_cursor_in := FloatCursor::empty();
        self.layout.float_cursor_out := add_left(self.layout.float_cursor_in, self.layout.content_box.x, self.layout.content_box.y, self.layout.content_box.width, self.layout.content_box.height);
    }
}

/* display: inline */
class Inline : LayoutNode {
    statements {
        self.layout.border.left := self.style.border.left;
        self.layout.border.right := self.style.border.right;
        self.layout.border.top := self.style.border.top;
        self.layout.border.bottom := self.style.border.bottom;

        self.layout.padding.left := self.style.padding.left;
        self.layout.padding.right := self.style.padding.right;
        self.layout.padding.top := self.style.padding.top;
        self.layout.padding.bottom := self.style.padding.bottom;

        self.layout.margin_above.collapse := 1 == 0;
        self.layout.margin_below.collapse := 1 == 0;

        self.layout.margin.left := self.style.margin.left->value();
        self.layout.margin.right := self.style.margin.right->value();
        self.layout.margin.top := self.style.margin.top->value();
        self.layout.margin.bottom := self.style.margin.bottom->value();

        self.layout.underflow :=
            self.layout.container.width
            - self.style.padding.left - self.style.padding.right
            - self.style.border.left - self.style.border.right
            - self.style.margin.left->value() - self.style.margin.right->value()
            - self.style.width->value();

        self.layout.content_box.x :=
            self.layout.container.x +
            self.layout.padding.left + self.layout.border.left + self.layout.margin.left;
        self.layout.content_box.width :=
            if self.style.width->is_auto() then
                max(self.layout.underflow, 0.0)
            else
                self.style.width->value();

        self.layout.content_box.y :=
            self.layout.container.y + //self.layout.container.height +
            self.layout.padding.top + self.layout.border.top + self.layout.margin.top;
        self.layout.content_box.height := self.style.height->value();

        self.layout.padding_box.x := self.layout.content_box.x - self.layout.padding.left;
        self.layout.padding_box.y := self.layout.content_box.y - self.layout.padding.top;
        self.layout.padding_box.width := self.layout.content_box.width + self.layout.padding.left + self.layout.padding.right;
        self.layout.padding_box.height := self.layout.content_box.height + self.layout.padding.top + self.layout.padding.bottom;

        self.layout.border_box.x := self.layout.padding_box.x - self.layout.border.left;
        self.layout.border_box.y := self.layout.padding_box.y - self.layout.border.top;
        self.layout.border_box.width := self.layout.padding_box.width + self.layout.border.left + self.layout.border.right;
        self.layout.border_box.height := self.layout.padding_box.height + self.layout.border.top + self.layout.border.bottom;

        self.layout.margin_box.x := self.layout.border_box.x - self.layout.margin.left;
        self.layout.margin_box.y := self.layout.border_box.y - self.layout.margin.top;
        self.layout.margin_box.width := self.layout.border_box.width + self.layout.margin.left + self.layout.margin.right;
        self.layout.margin_box.height := self.layout.border_box.height + self.layout.margin.top + self.layout.margin.bottom;

        self.layout.block_size := self.layout.content_box.height;

        self.layout.float_cursor_out := clone(self.layout.float_cursor_in);
    }
}
