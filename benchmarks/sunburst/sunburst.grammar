traversal pre {
    case Root {
        ??;
        recur child;
    }
    case Radial {
        ??;
        iterate child { ??; }
        iterate child { recur child; }
    }
    case Leaf {
        ??;
    }
}

traversal post {
    case Root {
        recur child;
        ??;
    }
    case Radial {
        iterate child { recur child; }
        iterate child { ??; }
        ??;
    }
    case Leaf {
        ??;
    }
}

traversal zip {
    case Root {
        ??;
        recur child;
    }
    case Radial {
        iterate child {
            ??;
            recur child;
            ??;
        }
        ??;
    }
    case Leaf {
        ??;
    }
}

interface Node {
    input open : int;
    output show : int;

    output r : int;
    output parentTotR : int;
    output alpha : int;
    output sectorAng : int;
    output maxR : int;

    input bgcolor : int;
    output render : int;

    output rootCenterX : int;
    output rootCenterY : int;

    output numOpenChildren : int;

    //output subtreeWeight : int;
}

interface IRoot { }

class Root : IRoot {
    children {
        child : Node;
    }
    attributes {
        input radius : int;
        input centerRadius : int;
        input centerAlpha : int;

        input w : int;
        input h : int;
    }

    statements {
        child.alpha := 45;
        child.maxR := self.radius;
        child.parentTotR := 0;
        child.sectorAng := 360;

        child.show := 1;

        child.rootCenterX := self.centerRadius * self.centerAlpha;
        child.rootCenterY := self.centerRadius * self.centerAlpha;
    }
}

class Radial : Node {
    children {
        child : [Node];
    }
    attributes {
        output numOpenGrandChildren : int;
    }
    statements {
        self.r := if (self.maxR - self.parentTotR)/3 < 10 then 10 else (self.maxR - self.parentTotR)/4;
        self.numOpenGrandChildren := child[-1].numOpenChildren : 0;

        child[i].parentTotR := self.parentTotR + self.r;

        child[i].rootCenterX := self.rootCenterX;
        child[i].rootCenterY := self.rootCenterY;

        child[i].show := self.show * child[i].open;

        child[i].maxR := self.maxR;

        child[i].sectorAng :=
            if self.numOpenGrandChildren > 0 then
                child[i].show * self.sectorAng / self.numOpenGrandChildren
            else
                0;

        child[i].alpha :=
            scanl
                if self.numOpenGrandChildren > 0 then
                    self.alpha - self.sectorAng / 2 - self.sectorAng / (self.numOpenGrandChildren * 2)
                else
                    0
            ..
                if self.numOpenGrandChildren > 0 then
                    child[@].alpha + child[i].show * (self.sectorAng / self.numOpenGrandChildren)
                else
                    0;

        self.numOpenChildren := foldl 0 .. self[@].numOpenChildren + child[i].show;

        self.render := self.rootCenterX + self.rootCenterY + self.show * (self.parentTotR + self.r) + self.alpha + self.sectorAng + (self.show * 4 * self.r) / 5 + self.bgcolor;
    }
}

class Leaf : Node {
    statements {
        self.r :=
            if (self.maxR - self.parentTotR)/3 < 10 then
                10
            else
                (self.maxR - self.parentTotR)/4;
        self.numOpenChildren := 0;
        self.render :=
            self.rootCenterX + self.rootCenterY + self.show * (self.parentTotR + self.r)
            + self.alpha + self.sectorAng + (self.show * 4 * self.r) / 5 + self.bgcolor;
    }
}
